// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

/// Model untuk mengelola semua file yang diunggah.
model UploadedFile {
  id                String   @id @default(cuid())
  originalFilename  String
  storagePath       String   @unique
  mimeType          String
  fileSize          Int
  createdAt         DateTime @default(now())
  
  jobsAsCv            EvaluationJob[] @relation("CvFile")
  jobsAsProjectReport EvaluationJob[] @relation("ProjectReportFile")
  jobsAsStudyCase     EvaluationJob[] @relation("StudyCaseBriefFile")

  @@map("uploadedfiles")
}

/// Model inti yang merepresentasikan satu tugas evaluasi kandidat.
model EvaluationJob {
  id                  String      @id @default(cuid())
  status              JobStatus   @default(QUEUED) // Enum: QUEUED, PROCESSING, COMPLETED, FAILED
  jobDescription      String
  result              Json?       // Tipe JSONB di Postgres untuk menyimpan hasil akhir
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Kunci asing untuk file-file terkait
  cvFileId            String
  projectReportFileId String
  studyCaseBriefId    String
  
  // Mendefinisikan relasi dengan UploadedFile
  cvFile              UploadedFile @relation("CvFile", fields: [cvFileId], references: [id])
  projectReportFile   UploadedFile @relation("ProjectReportFile", fields: [projectReportFileId], references: [id])
  studyCaseBriefFile  UploadedFile @relation("StudyCaseBriefFile", fields: [studyCaseBriefId], references: [id])

  @@map("evaluationjobs")
}

/// Model untuk menyimpan embedding vektor untuk RAG.
model VectorEmbedding {
  id        String    @id @default(cuid())
  content   String    // Potongan teks asli yang di-embed
  embedding Unsupported("vector(3072)") // Menggunakan tipe data `vector` dari pgvector. Ukuran (3072) tergantung model Gemini.
  metadata  Json      // Untuk menyimpan metadata (misal: tipe rubrik, id studi kasus)
  createdAt DateTime  @default(now())

  @@map("vectorembeddings")
}

// Enum untuk status pekerjaan
enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}
